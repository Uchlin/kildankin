// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text 
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  emailVerified DateTime?
  firstName     String
  lastName      String
  role          Role         @default(USER)

  accounts      Account[]
  sessions      Session[]

  tournaments   Tournament[] @relation("OwnerTournaments")
  participants  Participant[]
}

model Tournament {
  id             String       @id @default(cuid())
  name           String
  roundsCount    Int
  participantsCount Int @default(0)
  createdAt      DateTime     @default(now())

  owner          User         @relation("OwnerTournaments", fields: [ownerId], references: [id])
  ownerId        String

  participants   Participant[]
  rounds         Round[]
}

model Participant {
  id             String       @id @default(cuid())
  firstName      String
  lastName       String
  rating         Int

  tournament     Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId   String
  user           User?        @relation(fields: [userId], references: [id])
  userId         String?

  matchesAsWhite Match[]      @relation("WhiteMatches")
  matchesAsBlack Match[]      @relation("BlackMatches")

  points         Float        @default(0)
  buchholz       Float        @default(0)
}

model Round {
  id             String       @id @default(cuid())
  number         Int

  tournament     Tournament   @relation(fields: [tournamentId], references: [id])
  tournamentId   String

  matches        Match[]
}

model Match {
  id        String      @id @default(cuid())
  round     Round       @relation(fields: [roundId], references: [id])
  roundId   String

  white     Participant @relation("WhiteMatches", fields: [whiteId], references: [id])
  whiteId   String

  black     Participant @relation("BlackMatches", fields: [blackId], references: [id])
  blackId   String

  result    MatchResult @default(NONE)
}
enum MatchResult {
  WHITE_WIN
  BLACK_WIN
  DRAW
  NONE
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}