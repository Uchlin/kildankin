"use server";

import { PrismaClient } from "@prisma/client";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";

const prisma = new PrismaClient();

// üìå –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤ –ø–æ —à–≤–µ–π—Ü–∞—Ä—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ
function estimateSwissRounds(N: number): number {
  if (N == 2) return 1 
  if (N <= 3) return 2;
  if (N <= 4) return 3;
  if (N <= 6) return 4; 
  if (N <= 8) return 5;
  if (N <= 16) return 6;
  if (N <= 32) return 7;
  if (N <= 64) return 8;
  if (N <= 128) return 9;
  if (N <= 256) return 10;
  if (N <= 512) return 11;
  if (N <= 1024) return 12;
  if (N <= 2048) return 13;
  if (N <= 4096) return 14;
  if (N <= 8192) return 15;
  return 16; // –∑–∞–ø–∞—Å
}

export async function addTournament(formData: FormData) {
  const name = formData.get("name")?.toString();
  const ownerId = formData.get("ownerId")?.toString();
  const participantsCount = parseInt(formData.get("participantsCount")?.toString() || "0");

  if (!name || !ownerId || isNaN(participantsCount) || participantsCount < 2) {
    throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞");
  }

  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—É—Ä–æ–≤
  const roundsCount = estimateSwissRounds(participantsCount);

  await prisma.tournament.create({
    data: {
      name,
      participantsCount,
      roundsCount,
      ownerId,
    },
  });

  revalidatePath("/tournaments");
  redirect("/tournaments");
}
